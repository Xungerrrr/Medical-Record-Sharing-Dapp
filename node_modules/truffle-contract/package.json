{
  "_args": [
    [
      "truffle-contract@^3.0.6",
      "/home/xungerrrr/Medical-Record-Sharing-Dapp"
    ]
  ],
  "_from": "truffle-contract@>=3.0.6 <4.0.0",
  "_hasShrinkwrap": false,
  "_id": "truffle-contract@3.0.7",
  "_inCache": true,
  "_installable": true,
  "_location": "/truffle-contract",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/truffle-contract_3.0.7_1545429100154_0.5746974003895446"
  },
  "_npmUser": {
    "email": "pobol234@gmail.com",
    "name": "eggplantzzz"
  },
  "_phantomChildren": {
    "bignumber.js": "2.0.7",
    "utf8": "2.1.2",
    "xhr2": "0.1.4",
    "xmlhttprequest": "1.8.0"
  },
  "_requested": {
    "name": "truffle-contract",
    "raw": "truffle-contract@^3.0.6",
    "rawSpec": "^3.0.6",
    "scope": null,
    "spec": ">=3.0.6 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/truffle-contract/-/truffle-contract-3.0.7.tgz",
  "_shasum": "487b2e1e9c5f01d223148766f6f320ba16bb4f63",
  "_shrinkwrap": null,
  "_spec": "truffle-contract@^3.0.6",
  "_where": "/home/xungerrrr/Medical-Record-Sharing-Dapp",
  "author": {
    "email": "tim.coulter@consensys.net",
    "name": "Tim Coulter"
  },
  "bugs": {
    "url": "https://github.com/trufflesuite/truffle-contract/issues"
  },
  "dependencies": {
    "ethjs-abi": "0.1.8",
    "truffle-blockchain-utils": "^0.0.5",
    "truffle-contract-schema": "^2.0.2",
    "truffle-error": "^0.0.3",
    "web3": "0.20.6"
  },
  "description": "A better contract abstraction for Ethereum (formerly EtherPudding)",
  "devDependencies": {
    "async": "2.6.1",
    "browserify": "^14.0.0",
    "chai": "4.1.2",
    "debug": "^3.1.0",
    "ganache-core": "2.1.0-beta.0",
    "lodash": "4.17.10",
    "mocha": "5.2.0",
    "require-nocache": "^1.0.0",
    "solc": "0.4.25",
    "temp": "^0.8.3",
    "uglify": "^0.1.5",
    "uglify-js": "^2.7.5"
  },
  "directories": {},
  "dist": {
    "fileCount": 19,
    "integrity": "sha512-av4MTJDP29PI3oVh8TrvRzRHt+nZJH8ODSiil/TfcXrKMSes52DTA5LHj00siLvcadkxUgoEZfEZ04qqhNGoiA==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcHWBsCRA9TVsSAnZWagAADb4QAIO2j7frpnvhussQKcbp\n6zuPgMQK6x5WbgO+PV2wvVSuUU8HYPQXmz7xfqsDoFk37pcZQQSEEX2NT5Ru\nl2fIdkN09QmBVPWQeX6w9OdXZZ/Eb2vTS8QW+HZDEEDYenynF6ei0jMknUCU\n3UbNZs6gdBbSGzUmUNReJq5T3QjrTBgWkWShfpDw5nYtXCjfguoOjs7FWy6V\nwfdfBeEyVICLglEX+BMD7WWqOx3SwbOHTFBfQDHMqGiSmSz+6gJG+B/bHm//\ngmMXwTz24US5I0uMpBgdNO1b1KvrQleDu26Tfn/p+G1mExQho5YYKO2uBmVf\nqUF9dJzt6BesdgL4bWSZzxSenOzOUWJhhz2K6rSV9BjR3VA/g9hV3cGUCgWN\nlU6Dvz3pVOaY8JN/ZZ/lJAn8AQJdBpUE26y4U3dFbJ4uoF3ZEBvjXZe1dWBA\nXDdKiFffl0Tc7fMYW1wipzJx/kf5C2Z5EsE+DxnGf3mkqWSHWR0P8yYf0UCz\nj9jjFzbuFUlNeARXdFmODuDq/ufRuBm5nx11/Q1Q2zNsQUOzbnWNM3yFLVm8\nRSVHWLRuJWPZNb2GCWk5v/2UI8mAuAPPPpE7iL73HaAqVW/3ASQ10bYHJRte\n7EPjQdEqqvC7HOgEVw4piEp8TyUL2Cfq+MH46MG8Cq33/2ZO0YayXuN542/7\n6ui7\r\n=zBDd\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "487b2e1e9c5f01d223148766f6f320ba16bb4f63",
    "tarball": "https://registry.npmjs.org/truffle-contract/-/truffle-contract-3.0.7.tgz",
    "unpackedSize": 985682
  },
  "gitHead": "49441d73a5f145a4dc37fee6c3b19d8e64b8d7d0",
  "homepage": "https://github.com/trufflesuite/truffle-contract#readme",
  "keywords": [
    "abstraction",
    "contract",
    "ethereum",
    "truffle"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "benjamincburns",
      "email": "benjamin.c.burns@gmail.com"
    },
    {
      "name": "cruzmolina",
      "email": "cruz.adam.molina@gmail.com"
    },
    {
      "name": "davidmurdoch",
      "email": "david@davidmurdoch.com"
    },
    {
      "name": "eggplantzzz",
      "email": "pobol234@gmail.com"
    },
    {
      "name": "gnidan",
      "email": "nick@gnidan.org"
    },
    {
      "name": "seesemichaelj",
      "email": "seesemichaelj@gmail.com"
    },
    {
      "name": "tcoulter",
      "email": "tim@timothyjcoulter.com"
    }
  ],
  "name": "truffle-contract",
  "optionalDependencies": {},
  "publishConfig": {
    "access": "public"
  },
  "readme": "# truffle-contract\n\nBetter Ethereum contract abstraction, for Node and the browser.\n\n### Install\n\n```\n$ npm install truffle-contract\n```\n\n### Features\n\n* Synchronized transactions for better control flow (i.e., transactions won't finish until you're guaranteed they've been mined).\n* Promises. No more callback hell. Works well with `ES6` and `async/await`.\n* Default values for transactions, like `from` address or `gas`.\n* Returning logs, transaction receipt and transaction hash of every synchronized transaction.\n\n### Usage\n\nFirst, set up a new web3 provider instance and initialize your contract, then `require(\"truffle-contract\")`. The input to the `contract` function is a JSON blob defined by [truffle-contract-schema](https://github.com/trufflesuite/truffle-contract-schema). This JSON blob is structured in a way that can be passed to all truffle-related projects.\n\n```javascript\nvar provider = new Web3.providers.HttpProvider(\"http://localhost:8545\");\nvar contract = require(\"truffle-contract\");\n\nvar MyContract = contract({\n  abi: ...,\n  unlinked_binary: ...,\n  address: ..., // optional\n  // many more\n})\nMyContract.setProvider(provider);\n```\n\nYou now have access to the following functions on `MyContract`, as well as many others:\n\n* `at()`: Create an instance of `MyContract` that represents your contract at a specific address.\n* `deployed()`: Create an instance of `MyContract` that represents the default address managed by `MyContract`.\n* `new()`: Deploy a new version of this contract to the network, getting an instance of `MyContract` that represents the newly deployed instance.\n\nEach instance is tied to a specific address on the Ethereum network, and each instance has a 1-to-1 mapping from Javascript functions to contract functions. For instance, if your Solidity contract had a function defined `someFunction(uint value) {}` (solidity), then you could execute that function on the network like so:\n\n  ```javascript\n  var deployed;\n  MyContract.deployed().then(function(instance) {\n    var deployed = instance;\n    return instance.someFunction(5);\n  }).then(function(result) {\n    // Do something with the result or continue with more transactions.\n  });\n  ```\n\n### Browser Usage\n\nIn your `head` element, include Web3 and then include truffle-contract:\n\n```\n<script type=\"text/javascript\" src=\"./path/to/web3.min.js\"></script>\n<script type=\"text/javascript\" src=\"./dist/truffle-contract.min.js\"></script>\n```\n\nAlternatively, you can use the non-minified versions for easier debugging.\n\nWith this usage, `truffle-contract` will be available via the `TruffleContract` object:\n\n```\nvar MyContract = TruffleContract(...);\n```\n\n### Full Example\n\nLet's use `truffle-contract` with an example contract from [Dapps For Beginners](https://dappsforbeginners.wordpress.com/tutorials/your-first-dapp/). In this case, the abstraction has been saved to a `.sol.js` file by [truffle-artifactor](https://github.com/trufflesuite/truffle-artifactor):\n\n```javascript\n// Require the package that was previosly saved by truffle-artifactor\nvar MetaCoin = require(\"./path/to/MetaCoin.sol.js\");\n\n// Remember to set the Web3 provider (see above).\nMetaCoin.setProvider(provider);\n\n// In this scenario, two users will send MetaCoin back and forth, showing\n// how truffle-contract allows for easy control flow.\nvar account_one = \"5b42bd01ff...\";\nvar account_two = \"e1fd0d4a52...\";\n\n// Note our MetaCoin contract exists at a specific address.\nvar contract_address = \"8e2e2cf785...\";\nvar coin;\n\nMetaCoin.at(contract_address).then(function(instance) {\n  coin = instance;\n\n  // Make a transaction that calls the function `sendCoin`, sending 3 MetaCoin\n  // to the account listed as account_two.\n  return coin.sendCoin(account_two, 3, {from: account_one});\n}).then(function(result) {\n  // This code block will not be executed until truffle-contract has verified\n  // the transaction has been processed and it is included in a mined block.\n  // truffle-contract will error if the transaction hasn't been processed in 120 seconds.\n\n  // Since we're using promises, we can return a promise for a call that will\n  // check account two's balance.\n  return coin.balances.call(account_two);\n}).then(function(balance_of_account_two) {\n  alert(\"Balance of account two is \" + balance_of_account_two + \"!\"); // => 3\n\n  // But maybe too much was sent. Let's send some back.\n  // Like before, will create a transaction that returns a promise, where\n  // the callback won't be executed until the transaction has been processed.\n  return coin.sendCoin(account_one, 1.5, {from: account_two});\n}).then(function(result) {\n  // Again, get the balance of account two\n  return coin.balances.call(account_two)\n}).then(function(balance_of_account_two) {\n  alert(\"Balance of account two is \" + balance_of_account_two + \"!\") // => 1.5\n}).catch(function(err) {\n  // Easily catch all errors along the whole execution.\n  alert(\"ERROR! \" + err.message);\n});\n```\n\n# API\n\nThere are two API's you'll need to be aware of. One is the static Contract Abstraction API and the other is the Contract Instance API. The Abstraction API is a set of functions that exist for all contract abstractions, and those function exist on the abstraction itself (i.e., `MyContract.at()`). In contrast, the Instance API is the API available to contract instances -- i.e., abstractions that represent a specific contract on the network -- and that API is created dynamically based on functions available in your Solidity source file.\n\n### Contract Abstraction API\n\nEach contract abstraction -- `MyContract` in the examples above -- have the following useful functions:\n\n#### `MyContract.new([arg1, arg2, ...], [tx params])`\n\nThis function take whatever contructor parameters your contract requires and deploys a new instance of the contract to the network. There's an optional last argument which you can use to pass transaction parameters including the transaction from address, gas limit and gas price. This function returns a Promise that resolves into a new instance of the contract abstraction at the newly deployed address.\n\n#### `MyContract.at(address)`\n\nThis function creates a new instance of the contract abstraction representing the contract at the passed in address. Returns a \"thenable\" object (not yet an actual Promise for backward compatibility). Resolves to a contract abstraction instance after ensuring code exists at the specified address.\n\n#### `MyContract.deployed()`\n\nCreates an instance of the contract abstraction representing the contract at its deployed address. The deployed address is a special value given to truffle-contract that, when set, saves the address internally so that the deployed address can be inferred from the given Ethereum network being used. This allows you to write code referring to a specific deployed contract without having to manage those addresses yourself. Like `at()`, `deployed()` is thenable, and will resolve to a contract abstraction instance representing the deployed contract after ensuring that code exists at that location and that that address exists on the network being used.\n\n#### `MyContract.link(instance)`\n\nLink a library represented by a contract abstraction instance to MyContract. The library must first be deployed and have its deployed address set. The name and deployed address will be inferred from the contract abstraction instance. When this form of `MyContract.link()` is used, MyContract will consume all of the linked library's events and will be able to report that those events occurred during the result of a transaction.\n\nLibraries can be linked multiple times and will overwrite their previous linkage.\n\nNote: This method has two other forms, but this form is recommended.\n\n#### `MyContract.link(name, address)`\n\nLink a library with a specific name and address to MyContract. The library's events will not be consumed using this form.\n\n#### `MyContract.link(object)`\n\nLink multiple libraries denoted by an Object to MyContract. The keys must be strings representing the library names and the values must be strings representing the addresses. Like above, libraries' events will not be consumed using this form.\n\n#### `MyContract.networks()`\n\nView a list of network ids this contract abstraction has been set up to represent.\n\n#### `MyContract.setProvider(provider)`\n\nSets the web3 provider this contract abstraction will use to make transactions.\n\n#### `MyContract.setNetwork(network_id)`\n\nSets the network that MyContract is currently representing.\n\n#### `MyContract.hasNetwork(network_id)`\n\nReturns a boolean denoting whether or not this contract abstraction is set up to represent a specific network.\n\n#### `MyContract.defaults([new_defaults])`\n\nGet's and optionally sets transaction defaults for all instances created from this abstraction. If called without any parameters it will simply return an Object representing current defaults. If an Object is passed, this will set new defaults. Example default transaction values that can be set are:\n\n```javascript\nMyContract.defaults({\n  from: ...,\n  gas: ...,\n  gasPrice: ...,\n  value: ...\n})\n```\n\nSetting a default `from` address, for instance, is useful when you have a contract abstraction you intend to represent one user (i.e., one address).\n\n#### `MyContract.clone(network_id)`\n\nClone a contract abstraction to get another object that manages the same contract artifacts, but using a different `network_id`. This is useful if you'd like to manage the same contract but on a different network. When using this function, don't forget to set the correct provider afterward.\n\n```javascript\nvar MyOtherContract = MyContract.clone(1337);\n```\n\n### Contract Instance API\n\nEach contract instance is different based on the source Solidity contract, and the API is created dynamically. For the purposes of this documentation, let's use the following Solidity source code below:\n\n```javascript\ncontract MyContract {\n  uint public value;\n  event ValueSet(uint val);\n  function setValue(uint val) {\n    value = val;\n    ValueSet(value);\n  }\n  function getValue() constant returns (uint) {\n    return value;\n  }\n}\n```\n\nFrom Javascript's point of view, this contract has three functions: `setValue`, `getValue` and `value`. This is because `value` is public and automatically creates a getter function for it.\n\n#### Making a transaction via a contract function\n\nWhen we call `setValue()`, this creates a transaction. From Javascript:\n\n```javascript\ninstance.setValue(5).then(function(result) {\n  // result object contains import information about the transaction\n  console.log(\"Value was set to\", result.logs[0].args.val);\n});\n```\n\nThe result object that gets returned looks like this:\n\n```javascript\n{\n  tx: \"0x6cb0bbb6466b342ed7bc4a9816f1da8b92db1ccf197c3f91914fc2c721072ebd\",\n  receipt: {\n    // The return value from web3.eth.getTransactionReceipt(hash)\n    // See https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgettransactionreceipt\n  },\n  logs: [\n    {\n      address: \"0x13274fe19c0178208bcbee397af8167a7be27f6f\",\n      args: {\n        val: BigNumber(5),\n      },\n      blockHash: \"0x2f0700b5d039c6ea7cdcca4309a175f97826322beb49aca891bf6ea82ce019e6\",\n      blockNumber: 40,\n      event: \"ValueSet\",\n      logIndex: 0,\n      transactionHash: \"0x6cb0bbb6466b342ed7bc4a9816f1da8b92db1ccf197c3f91914fc2c721072ebd\",\n      transactionIndex: 0,\n      type:\"mined\",\n    },\n  ],\n}\n```\n\nNote that if the function being executed in the transaction has a return value, you will not get that\nreturn value inside this result. You must instead use an event (like `ValueSet`) and look up the result\nin the `logs` array.\n\n#### Explicitly making a call instead of a transaction\n\nWe can call `setValue()` without creating a transaction by explicitly using `.call`:\n\n```javascript\ninstance.setValue.call(5).then(...);\n```\n\nThis isn't very useful in this case, since `setValue()` sets things, and the value we pass won't be saved since we're not creating a transaction.\n\n#### Calling getters\n\nHowever, we can *get* the value using `getValue()`, using `.call()`. Calls are always free and don't cost any Ether, so they're good for calling functions that read data off the blockchain:\n\n```javascript\ninstance.getValue.call().then(function(val) {\n  // val reprsents the `value` storage object in the solidity contract\n  // since the contract returns that value.\n});\n```\n\nEven more helpful, however is we *don't even need* to use `.call` when a function is marked as `constant`, because `truffle-contract` will automatically know that that function can only be interacted with via a call:\n\n```javascript\ninstance.getValue().then(function(val) {\n  // val reprsents the `value` storage object in the solidity contract\n  // since the contract returns that value.\n});\n```\n\n#### Processing transaction results\n\nWhen you make a transaction, you're given a `result` object that gives you a wealth of information about the transaction. You're given the transaction has (`result.tx`), the decoded events (also known as logs; `result.logs`), and a transaction receipt (`result.receipt`). In the below example, you'll recieve the `ValueSet()` event because you triggered the event using the `setValue()` function:\n\n```javascript\ninstance.setValue(5).then(function(result) {\n  // result.tx => transaction hash, string\n  // result.logs => array of trigger events (1 item in this case)\n  // result.receipt => receipt object\n});\n```\n\n#### Sending Ether / Triggering the fallback function\n\nYou can trigger the fallback function by sending a transaction to this function:\n\n```javascript\ninstance.sendTransaction({...}).then(function(result) {\n  // Same result object as above.\n});\n```\n\nThis is promisified like all available contract instance functions, and has the same API as `web3.eth.sendTransaction` without the callback. The `to` value will be automatically filled in for you.\n\nIf you only want to send Ether to the contract a shorthand is available:\n\n```javascript\ninstance.send(web3.toWei(1, \"ether\")).then(function(result) {\n  // Same result object as above.\n});\n```\n\n#### Estimating gas usage\n\nRun this function to estimate the gas usage:\n\n```javascript\ninstance.setValue.estimateGas(5).then(function(result) {\n  // result => estimated gas for this transaction\n});\n```\n\n# Testing\n\nThis package is the result of breaking up EtherPudding into multiple modules. Tests currently reside within [truffle-artifactor](https://github.com/trufflesuite/truffle-artifactor) but will soon move here.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/trufflesuite/truffle-contract.git"
  },
  "scripts": {
    "compile": "browserify ./index.js -i web3 -o ./dist/truffle-contract.js && uglifyjs ./dist/truffle-contract.js -o ./dist/truffle-contract.min.js",
    "debug": "DEBUG=ganache-core mocha",
    "test": "mocha"
  },
  "version": "3.0.7"
}
